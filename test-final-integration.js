#!/usr/bin/env node

/**
 * –§–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ MCP —Å–µ—Ä–≤–µ—Ä–∞ —Å —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–º –∫–æ–Ω–Ω–µ–∫—Ç–æ—Ä–æ–º
 */

import { spawn } from 'child_process';
import { createWriteStream } from 'fs';

async function testMcpIntegration() {
    console.log('üîç –§–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ MCP —Å–µ—Ä–≤–µ—Ä–∞');

    return new Promise((resolve, reject) => {
        // –ó–∞–ø—É—Å–∫–∞–µ–º MCP —Å–µ—Ä–≤–µ—Ä
        const mcpServer = spawn('node', ['dist/index.js'], {
            stdio: ['pipe', 'pipe', 'pipe'],
            cwd: process.cwd()
        });

        let serverReady = false;
        let authCompleted = false;
        let processorsReceived = false;

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ stderr –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞
        mcpServer.stderr.on('data', (data) => {
            const message = data.toString().trim();
            console.log('üì° Server stderr:', message);
            
            if (message.includes('MODX Proxy MCP Server running on stdio')) {
                serverReady = true;
                console.log('‚úÖ MCP —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω');
                startTests();
            }
        });

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ stdout –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–æ–≤
        mcpServer.stdout.on('data', (data) => {
            try {
                const response = JSON.parse(data.toString().trim());
                console.log('üì• Server response:', JSON.stringify(response, null, 2));
                
                // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
                if (response.result && response.result.content) {
                    const content = JSON.parse(response.result.content[0].text);
                    
                    if (content.success && content.user && !authCompleted) {
                        console.log('‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞');
                        authCompleted = true;
                        testGetProcessors();
                    } else if (content.success && content.processors && !processorsReceived) {
                        console.log('‚úÖ –°–ø–∏—Å–æ–∫ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–æ–≤ –ø–æ–ª—É—á–µ–Ω');
                        console.log(`   –ù–∞–π–¥–µ–Ω–æ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–æ–≤: ${content.total}`);
                        console.log(`   –î–∞—Ç–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: ${content.generated_at}`);
                        processorsReceived = true;
                        testCompleted();
                    }
                }
            } catch (e) {
                console.log('üì• Server output (–Ω–µ JSON):', data.toString().trim());
            }
        });

        // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ JSON-RPC –∑–∞–ø—Ä–æ—Å–æ–≤
        function sendRequest(id, method, params = {}) {
            const request = {
                jsonrpc: "2.0",
                id: id,
                method: method,
                params: params
            };
            console.log('üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞:', JSON.stringify(request));
            mcpServer.stdin.write(JSON.stringify(request) + '\n');
        }

        // –ù–∞—á–∏–Ω–∞–µ–º —Ç–µ—Å—Ç—ã
        function startTests() {
            setTimeout(() => {
                console.log('\nüì° –¢–µ—Å—Ç 1: –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è');
                sendRequest(1, 'tools/call', {
                    name: 'modx_login',
                    arguments: {
                        username: 'admin',
                        password: 'adminadmin',
                        baseUrl: 'http://claude-modx-mcp.my'
                    }
                });
            }, 1000);
        }

        // –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–æ–≤
        function testGetProcessors() {
            setTimeout(() => {
                console.log('\nüì° –¢–µ—Å—Ç 2: –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–æ–≤');
                sendRequest(2, 'tools/call', {
                    name: 'modx_get_processors',
                    arguments: {
                        refresh: false
                    }
                });
            }, 1000);
        }

        // –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤
        function testCompleted() {
            console.log('\nüéâ –í—Å–µ —Ç–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!');
            mcpServer.kill();
            resolve(true);
        }

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
        mcpServer.on('error', (error) => {
            console.error('‚ùå –û—à–∏–±–∫–∞ MCP —Å–µ—Ä–≤–µ—Ä–∞:', error);
            reject(error);
        });

        mcpServer.on('exit', (code) => {
            console.log(`üì° MCP —Å–µ—Ä–≤–µ—Ä –∑–∞–≤–µ—Ä—à–µ–Ω —Å –∫–æ–¥–æ–º: ${code}`);
            if (!processorsReceived) {
                reject(new Error('–¢–µ—Å—Ç—ã –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω—ã'));
            }
        });

        // –¢–∞–π–º–∞—É—Ç –¥–ª—è —Ç–µ—Å—Ç–æ–≤
        setTimeout(() => {
            if (!processorsReceived) {
                console.log('‚è∞ –¢–∞–π–º–∞—É—Ç —Ç–µ—Å—Ç–æ–≤');
                mcpServer.kill();
                reject(new Error('Timeout'));
            }
        }, 30000);
    });
}

testMcpIntegration()
    .then(() => {
        console.log('\n‚úÖ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ç–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ');
        process.exit(0);
    })
    .catch((error) => {
        console.error('\n‚ùå –û—à–∏–±–∫–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞:', error);
        process.exit(1);
    });