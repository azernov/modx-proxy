#!/usr/bin/env node

/**
 * –¢–µ—Å—Ç –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ MCP —Å–µ—Ä–≤–µ—Ä–∞
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —á—Ç–æ –ø–æ—Å–ª–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ —Å–µ—Ä–≤–µ—Ä –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤—Å–µ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä—ã –∫–∞–∫ –æ—Ç–¥–µ–ª—å–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã
 */

import { spawn } from 'child_process';

async function testDynamicTools() {
    console.log('üîç –¢–µ—Å—Ç –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ MCP —Å–µ—Ä–≤–µ—Ä–∞');

    return new Promise((resolve, reject) => {
        const mcpServer = spawn('node', ['dist/index.js'], {
            stdio: ['pipe', 'pipe', 'pipe'],
            cwd: process.cwd()
        });

        let serverReady = false;
        let authCompleted = false;
        let toolsBeforeAuth = [];
        let toolsAfterAuth = [];
        let testedDynamicTool = false;

        mcpServer.stderr.on('data', (data) => {
            const message = data.toString().trim();
            console.log('üì° Server stderr:', message);

            if (message.includes('MODX Proxy MCP Server running on stdio')) {
                serverReady = true;
                console.log('‚úÖ MCP —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω');
                startTests();
            }
        });

        mcpServer.stdout.on('data', (data) => {
            const output = data.toString().trim();
            const lines = output.split('\n').filter(line => line.trim());

            for (const line of lines) {
                try {
                    const response = JSON.parse(line);

                    if (response.result) {
                        // List tools response
                        if (response.result.tools && response.id === 1) {
                            toolsBeforeAuth = response.result.tools;
                            console.log(`‚úÖ –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –î–û –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: ${toolsBeforeAuth.length}`);
                            toolsBeforeAuth.forEach(tool => {
                                console.log(`   - ${tool.name}: ${tool.description}`);
                            });
                            performLogin();
                        }

                        // Login response
                        else if (response.result.content && response.id === 2) {
                            const content = JSON.parse(response.result.content[0].text);
                            if (content.success && content.user && !authCompleted) {
                                console.log('‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞');
                                authCompleted = true;
                                getToolsAfterAuth();
                            }
                        }

                        // Tools after auth
                        else if (response.result.tools && response.id === 3) {
                            toolsAfterAuth = response.result.tools;
                            console.log(`‚úÖ –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –ü–û–°–õ–ï –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: ${toolsAfterAuth.length}`);

                            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
                            const dynamicTools = toolsAfterAuth.filter(tool =>
                                tool.name.startsWith('modx_') &&
                                !['modx_login', 'modx_logout', 'modx_get_session_info'].includes(tool.name)
                            );

                            console.log(`   –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤: ${dynamicTools.length}`);
                            console.log('   –ü—Ä–∏–º–µ—Ä—ã –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤:');
                            dynamicTools.slice(0, 5).forEach(tool => {
                                console.log(`   - ${tool.name}: ${tool.description}`);
                            });

                            testDynamicTool();
                        }

                        // Dynamic tool test response
                        else if (response.result.content && response.id === 4) {
                            const content = JSON.parse(response.result.content[0].text);
                            console.log('‚úÖ –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç modx_core_resource_getlist –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω');
                            console.log('   Success:', content.success);
                            if (content.results && content.results.length > 0) {
                                console.log(`   –ù–∞–π–¥–µ–Ω–æ —Ä–µ—Å—É—Ä—Å–æ–≤: ${content.results.length}`);
                                console.log(`   –ü–µ—Ä–≤—ã–π —Ä–µ—Å—É—Ä—Å: ID=${content.results[0].id}, Title="${content.results[0].pagetitle}"`);
                            }
                            testedDynamicTool = true;
                            testCompleted();
                        }
                    }
                } catch (e) {
                    // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –Ω–µ-JSON —Å—Ç—Ä–æ–∫–∏
                }
            }
        });

        function sendRequest(id, method, params = {}) {
            const request = {
                jsonrpc: "2.0",
                id: id,
                method: method,
                params: params
            };
            console.log('üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞:', JSON.stringify(request));
            mcpServer.stdin.write(JSON.stringify(request) + '\n');
        }

        function startTests() {
            setTimeout(() => {
                console.log('\nüì° –¢–µ—Å—Ç 1: –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ –î–û –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏');
                sendRequest(1, 'tools/list');
            }, 1000);
        }

        function performLogin() {
            setTimeout(() => {
                console.log('\nüì° –¢–µ—Å—Ç 2: –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è');
                sendRequest(2, 'tools/call', {
                    name: 'modx_login',
                    arguments: {
                        username: 'admin',
                        password: 'adminadmin',
                        baseUrl: 'http://claude-modx-mcp.my'
                    }
                });
            }, 1000);
        }

        function getToolsAfterAuth() {
            setTimeout(() => {
                console.log('\nüì° –¢–µ—Å—Ç 3: –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ –ü–û–°–õ–ï –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏');
                sendRequest(3, 'tools/list');
            }, 2000); // –î–∞–µ–º –≤—Ä–µ–º—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–æ–≤
        }

        function testDynamicTool() {
            setTimeout(() => {
                console.log('\nüì° –¢–µ—Å—Ç 4: –í—ã–∑–æ–≤ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–≥–æ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞ modx_core_resource_getlist');
                sendRequest(4, 'tools/call', {
                    name: 'modx_core_resource_getlist',
                    arguments: {
                        limit: 3,
                        start: 0
                    }
                });
            }, 1000);
        }

        function testCompleted() {
            console.log('\nüéâ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!');
            console.log('\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã:');
            console.log(`   –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ –¥–æ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: ${toolsBeforeAuth.length}`);
            console.log(`   –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ –ø–æ—Å–ª–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: ${toolsAfterAuth.length}`);
            console.log(`   –î–æ–±–∞–≤–ª–µ–Ω–æ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤: ${toolsAfterAuth.length - toolsBeforeAuth.length}`);
            console.log(`   –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç: ${testedDynamicTool ? '–î–ê' : '–ù–ï–¢'}`);

            mcpServer.kill();
            resolve(true);
        }

        mcpServer.on('error', (error) => {
            console.error('‚ùå –û—à–∏–±–∫–∞ MCP —Å–µ—Ä–≤–µ—Ä–∞:', error);
            reject(error);
        });

        mcpServer.on('exit', (code) => {
            console.log(`üì° MCP —Å–µ—Ä–≤–µ—Ä –∑–∞–≤–µ—Ä—à–µ–Ω —Å –∫–æ–¥–æ–º: ${code}`);
            if (!testedDynamicTool) {
                reject(new Error('–¢–µ—Å—Ç –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω'));
            }
        });

        setTimeout(() => {
            if (!testedDynamicTool) {
                console.log('‚è∞ –¢–∞–π–º–∞—É—Ç —Ç–µ—Å—Ç–∞');
                mcpServer.kill();
                reject(new Error('Timeout'));
            }
        }, 60000);
    });
}

testDynamicTools()
    .then(() => {
        console.log('\n‚úÖ –¢–µ—Å—Ç –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ');
        process.exit(0);
    })
    .catch((error) => {
        console.error('\n‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞:', error);
        process.exit(1);
    });
