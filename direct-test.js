#!/usr/bin/env node

/**
 * –ü—Ä—è–º–æ–π —Ç–µ—Å—Ç MODX –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –±–µ–∑ MCP –ø—Ä–æ—Ç–æ–∫–æ–ª–∞
 */

import { ModxProxyService } from './dist/modx-proxy.js';

async function testDirectConnection() {
    console.log('üîç –ü—Ä—è–º–æ–π —Ç–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ MODX');
    console.log('Domain: http://claude-modx-mcp.my');
    console.log('Username: admin');
    console.log('Password: adminadmin');

    // –£—Å—Ç–∞–Ω–æ–≤–∏–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
    process.env.MODX_BASE_URL = 'http://claude-modx-mcp.my';
    process.env.MODX_CONNECTOR_PATH = '/connectors/';
    process.env.MODX_ADMIN_PATH = '/manager/';

    const modxProxy = new ModxProxyService();

    try {
        console.log('\n=== –¢–µ—Å—Ç 1: –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è ===');
        
        const loginResult = await modxProxy.login('admin', 'adminadmin', 'http://claude-modx-mcp.my');
        
        if (loginResult.success) {
            console.log('‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞');
            console.log('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:', loginResult.user?.username || '–Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω');
            console.log('Session info:', loginResult.sessionInfo);

            console.log('\n=== –¢–µ—Å—Ç 2: –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–æ–≤ ===');
            
            try {
                const processors = await modxProxy.getProcessors();
                console.log('‚úÖ –°–ø–∏—Å–æ–∫ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–æ–≤ –ø–æ–ª—É—á–µ–Ω');
                console.log('–í—Å–µ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–æ–≤:', processors.total);
                console.log('–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω:', processors.generated_at);
                
                console.log('\n–ü—Ä–∏–º–µ—Ä—ã –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–æ–≤:');
                processors.processors.slice(0, 5).forEach(proc => {
                    console.log(`  - ${proc.namespace}/${proc.path}: ${proc.description}`);
                });

                console.log('\n=== –¢–µ—Å—Ç 3: –í—ã–∑–æ–≤ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞ resource/getlist ===');
                
                try {
                    const resourcesResult = await modxProxy.callProcessor('core', 'resource/getlist', {
                        limit: 3,
                        start: 0
                    });
                    
                    if (resourcesResult.success !== false) {
                        console.log('‚úÖ –ü—Ä–æ—Ü–µ—Å—Å–æ—Ä resource/getlist –≤—ã–ø–æ–ª–Ω–µ–Ω');
                        
                        const resources = resourcesResult.results || resourcesResult.data || [];
                        if (Array.isArray(resources)) {
                            console.log(`–ù–∞–π–¥–µ–Ω–æ —Ä–µ—Å—É—Ä—Å–æ–≤: ${resources.length}`);
                            resources.forEach(res => {
                                console.log(`  - ID: ${res.id}, "${res.pagetitle}"`);
                            });
                        } else {
                            console.log('–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ—Ç–≤–µ—Ç–∞:', Object.keys(resourcesResult));
                        }
                    } else {
                        console.log('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞:', resourcesResult.message);
                    }
                } catch (error) {
                    console.error('‚ùå –û—à–∏–±–∫–∞ –≤—ã–∑–æ–≤–∞ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞:', error.message);
                }

                console.log('\n=== –¢–µ—Å—Ç 4: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–µ—Å—Å–∏–∏ ===');
                
                const sessionInfo = modxProxy.getSessionInfo();
                console.log('‚úÖ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–µ—Å—Å–∏–∏ –ø–æ–ª—É—á–µ–Ω–∞');
                console.log('–ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω:', sessionInfo.isAuthenticated);
                console.log('Base URL:', sessionInfo.baseUrl);
                console.log('Connector URL:', sessionInfo.connectorUrl);

            } catch (error) {
                console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–æ–≤:', error.message);
            }

        } else {
            console.log('‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:', loginResult.message);
        }

    } catch (error) {
        console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error.message);
        console.error('Stack:', error.stack);
    }

    console.log('\nüèÅ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω');
}

testDirectConnection().catch(error => {
    console.error('–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞:', error);
    process.exit(1);
});