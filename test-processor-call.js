#!/usr/bin/env node

/**
 * –¢–µ—Å—Ç –≤—ã–∑–æ–≤–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞ —á–µ—Ä–µ–∑ MCP —Å–µ—Ä–≤–µ—Ä
 */

import { spawn } from 'child_process';

async function testProcessorCall() {
    console.log('üîç –¢–µ—Å—Ç –≤—ã–∑–æ–≤–∞ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞ resource/getlist —á–µ—Ä–µ–∑ MCP —Å–µ—Ä–≤–µ—Ä');

    return new Promise((resolve, reject) => {
        const mcpServer = spawn('node', ['dist/index.js'], {
            stdio: ['pipe', 'pipe', 'pipe'],
            cwd: process.cwd()
        });

        let serverReady = false;
        let authCompleted = false;
        let processorCalled = false;

        mcpServer.stderr.on('data', (data) => {
            const message = data.toString().trim();
            console.log('üì° Server stderr:', message);
            
            if (message.includes('MODX Proxy MCP Server running on stdio')) {
                serverReady = true;
                console.log('‚úÖ MCP —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω');
                startTests();
            }
        });

        mcpServer.stdout.on('data', (data) => {
            const output = data.toString().trim();
            
            // –ü—ã—Ç–∞–µ–º—Å—è –ø–∞—Ä—Å–∏—Ç—å –∫–∞–∂–¥—É—é —Å—Ç—Ä–æ–∫—É –∫–∞–∫ JSON
            const lines = output.split('\n').filter(line => line.trim());
            
            for (const line of lines) {
                try {
                    const response = JSON.parse(line);
                    
                    if (response.result && response.result.content) {
                        const content = JSON.parse(response.result.content[0].text);
                        
                        if (content.success && content.user && !authCompleted) {
                            console.log('‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞');
                            authCompleted = true;
                            testCallProcessor();
                        } else if (response.id === 3 && !processorCalled) {
                            console.log('‚úÖ –ü—Ä–æ—Ü–µ—Å—Å–æ—Ä resource/getlist –≤—ã–∑–≤–∞–Ω');
                            console.log('   Success:', content.success);
                            if (content.results && content.results.length > 0) {
                                console.log(`   –ù–∞–π–¥–µ–Ω–æ —Ä–µ—Å—É—Ä—Å–æ–≤: ${content.results.length}`);
                                console.log(`   –ü–µ—Ä–≤—ã–π —Ä–µ—Å—É—Ä—Å: ID=${content.results[0].id}, Title="${content.results[0].pagetitle}"`);
                            }
                            processorCalled = true;
                            testCompleted();
                        }
                    }
                } catch (e) {
                    // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –Ω–µ-JSON —Å—Ç—Ä–æ–∫–∏
                }
            }
        });

        function sendRequest(id, method, params = {}) {
            const request = {
                jsonrpc: "2.0",
                id: id,
                method: method,
                params: params
            };
            console.log('üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞:', JSON.stringify(request));
            mcpServer.stdin.write(JSON.stringify(request) + '\n');
        }

        function startTests() {
            setTimeout(() => {
                console.log('\nüì° –¢–µ—Å—Ç 1: –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è');
                sendRequest(1, 'tools/call', {
                    name: 'modx_login',
                    arguments: {
                        username: 'admin',
                        password: 'adminadmin',
                        baseUrl: 'http://claude-modx-mcp.my'
                    }
                });
            }, 1000);
        }

        function testCallProcessor() {
            setTimeout(() => {
                console.log('\nüì° –¢–µ—Å—Ç 2: –í—ã–∑–æ–≤ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞ resource/getlist');
                sendRequest(3, 'tools/call', {
                    name: 'modx_call_processor',
                    arguments: {
                        namespace: 'core',
                        action: 'resource/getlist',
                        data: {
                            limit: 3,
                            start: 0
                        }
                    }
                });
            }, 1000);
        }

        function testCompleted() {
            console.log('\nüéâ –¢–µ—Å—Ç –≤—ã–∑–æ–≤–∞ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!');
            mcpServer.kill();
            resolve(true);
        }

        mcpServer.on('error', (error) => {
            console.error('‚ùå –û—à–∏–±–∫–∞ MCP —Å–µ—Ä–≤–µ—Ä–∞:', error);
            reject(error);
        });

        mcpServer.on('exit', (code) => {
            console.log(`üì° MCP —Å–µ—Ä–≤–µ—Ä –∑–∞–≤–µ—Ä—à–µ–Ω —Å –∫–æ–¥–æ–º: ${code}`);
            if (!processorCalled) {
                reject(new Error('–¢–µ—Å—Ç –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω'));
            }
        });

        setTimeout(() => {
            if (!processorCalled) {
                console.log('‚è∞ –¢–∞–π–º–∞—É—Ç —Ç–µ—Å—Ç–∞');
                mcpServer.kill();
                reject(new Error('Timeout'));
            }
        }, 20000);
    });
}

testProcessorCall()
    .then(() => {
        console.log('\n‚úÖ –¢–µ—Å—Ç –≤—ã–∑–æ–≤–∞ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ');
        process.exit(0);
    })
    .catch((error) => {
        console.error('\n‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞:', error);
        process.exit(1);
    });